//---------------------------------------------------------------------------
#ifndef Uint1H
#define Uint1H
//---------------------------------------------------------------------------
#include <Classes.hpp>
#include <Controls.hpp>
#include <StdCtrls.hpp>
#include <Forms.hpp>
#include <ExtCtrls.hpp>
#include <MPlayer.hpp>
#include <Graphics.hpp>
#include <Buttons.hpp>
#include <ComCtrls.hpp>
#include <Grids.hpp>
#include <Dialogs.hpp>
#include <Menus.hpp>
#include <ImgList.hpp>
#include <jpeg.hpp>
#include <Db.hpp>
#include <DBTables.hpp>
#include "Trayicon.h"
#include <Mask.hpp>

//#include "HidInfoSet.h"
#include "SetupDi.h"
#include "HID.h"
#include "DeviceNotify.h"
#include <vector>
#include "USB_Hub_Tree.h"
//---------------------------------------------------------------------------
using namespace std;

#define CALLDLL extern "C" __declspec(dllexport)
CALLDLL int  A_Get_DLL_Version(int nShowMessage);
CALLDLL int  A_GetUSBBufferLen(void);
CALLDLL int  A_EnumUSB(char *buf);
CALLDLL int  A_GetUSBDeviceInfo(int nPort,char *pDeviceName,int *pDeviceNameLen,char* pDevicePath,int *pDevicePathLen);
CALLDLL int  A_CreatePrn(int selection,AnsiString filename);
CALLDLL void A_ClosePrn(void);

CALLDLL int  A_Set_Unit(char unit_Renamed);
CALLDLL int  A_Set_Syssetting(int transfer,int cut_peel,int length,int zero,int pause);

CALLDLL int  A_Set_Darkness(unsigned int heat);
CALLDLL int  A_Del_Graphic(int mem_mode,char *graphic);
CALLDLL void A_Clear_Memory(void);
CALLDLL int  A_Set_Backfeed(int back);
CALLDLL int  A_Prn_Text(int x,int y,int ori,int font,int type_Renamed,int hor_factor,int ver_factor,char mode,int numeric,char *data);
CALLDLL int  A_Print_Out(int width,int height,int copies,int amount);

//---------------------------------------------------------------------------
class TReadHIDThread : public TThread
{
public:
	__fastcall TReadHIDThread(bool CreateThread);
private:
	BYTE            InpR[5];
	DWORD           NOBR;
	DWORD           Result;
	unsigned int 	check;
	unsigned int 	F_Add;
	unsigned int 	S_Add;
	unsigned int 	E_Add;
	unsigned int 	C_Add;

	void __fastcall Execute(void);
	void __fastcall BackUI(void);
};
//---------------------------------------------------------------------------
class TUSBHIDForm : public TForm
{
__published:	// IDE-managed Components
	TMemo *Memo1;
	TButton *Button1;
		TButton *Button2;
	TEdit *Edit10;
	TEdit *Edit11;
	TEdit *Edit12;
	TEdit *Edit13;
	TEdit *Edit14;
	TEdit *Edit15;
	TEdit *Edit16;
	TEdit *Edit17;
	TButton *Button8;
	TEdit *Edit18;
	TEdit *Edit19;
	TEdit *Edit20;
	TEdit *Edit21;
	TEdit *Edit22;
	TEdit *Edit23;
	TEdit *Edit24;
	TEdit *Edit25;
	TButton *Button9;
	TEdit *Edit26;
	TEdit *Edit27;
	TEdit *Edit28;
	TEdit *Edit29;
	TEdit *Edit30;
	TEdit *Edit31;
	TEdit *Edit32;
	TEdit *Edit33;
	TButton *Button10;
	TEdit *Edit34;
	TEdit *Edit35;
	TEdit *Edit36;
	TEdit *Edit37;
	TEdit *Edit38;
	TEdit *Edit39;
	TEdit *Edit40;
	TEdit *Edit41;
	TButton *Button11;
	TLabel *Label30;
	TLabel *Label31;
	TLabel *Label32;
	TButton *Button4;
	TMemo *Memo3;
	TMemo *Memo2;
	TButton *Button6;
	TButton *Button7;
	TGroupBox *GroupBox1;
	TCheckBox *ckbCheckerboardTest;
	TCheckBox *ckbAddressBusTest;
	TCheckBox *ckbDataBusTest;
	TCheckBox *ckbVideo1080p;
	TCheckBox *ckbEthernetLoopbackTest;
	TCheckBox *ckbByteCountDataTest;
	TCheckBox *ckbAudio;
	TGroupBox *gbBurnSetting;
	TLabel *Label2;
	TCheckBox *ckbAutoIncrease;
	TGroupBox *gbRework;
	TGroupBox *GroupBox5;
	TButton *btnAutoTest;
	TGroupBox *GroupBox6;
	TButton *btnSetting;
	TMaskEdit *mskedtEndSn;
	TMaskEdit *mskedtMacPre;
	TMaskEdit *mskedtEndMac;
	TTimer *Timer2;
	TMaskEdit *MaskEdit9;
	TPanel *Panel1;
	TMemo *memoMsg;
	TLabel *lblStatus;
	TButton *btnGetInfo;
	TButton *Button5;
	TButton *Button12;
	TMemo *Memo5;
	TCheckBox *ckbBurn;
	TButton *Button19;
	TButton *btnPrint;
	TTimer *Timer3;
	TButton *btnLoadDutVersion;
	TLabel *Label14;
	TLabel *Label15;
	TEdit *edtBurnCount;
	TMaskEdit *mskedtBeginSn;
	TMaskEdit *mskedtBeginMac;
	TLabel *Label17;
	TCheckBox *ckbVerifyUsbHubVersion;
	TLabel *Label20;
	TLabel *Label21;
	TCheckBox *ckbVerifyDisplayLinkVersion;
	TCheckBox *ckbVideo4k;
	TCheckBox *ckbRework;
	TGroupBox *gbBurnContent;
	TLabel *Label1;
	TLabel *Label16;
	TMaskEdit *mskedtBurnSn;
	TMaskEdit *mskedBurntMacPre;
	TLabel *Label22;
	TMaskEdit *mskedtBurnMac;
	TCheckBox *ckbBurnVerify;
	TCheckBox *ckbAutoPrint;
	TTimer *Timer1;
	TButton *btnRework;
	TCheckBox *ckbMtsMode;
	TLabel *Label3;
	TLabel *Label4;
	TComboBox *ckbDutMaxTimeGetId;
	TComboBox *cmbNumOfChip;
	TEdit *Edit1;
	TPanel *Panel2;
	TLabel *Label19;
	TLabel *Label8;
	TEdit *edtBackupFirmwareSample;
	TLabel *Label18;
	TTreeView *trvReference;
	TPanel *Panel3;
	TLabel *Label6;
	TLabel *Label7;
	TLabel *lblChipID1;
	TLabel *lblChipID2;
	TEdit *edtMinFwVersionSample;
	TEdit *edtMinFwVersionSample2;
	TEdit *edtBackupFirmwareSample2;
	TCheckBox *ckbVideo4k601;
	TCheckBox *ckbVideo4k602;
	TEdit *Wav_Name_Edit;
	TComboBox *cb_myOutDevice;
	TComboBox *cb_myInDevice;
	TComboBox *cbOutputDevice;
	TComboBox *cbInputDevice;
	TTimer *Timer4;
	void __fastcall FormCreate(TObject *Sender);
	void __fastcall Button2Click(TObject *Sender);
	void __fastcall FormClose(TObject *Sender, TCloseAction &Action);
	void __fastcall Button4Click(TObject *Sender);
	void __fastcall btnAutoTestClick(TObject *Sender);
	void __fastcall btnSettingClick(TObject *Sender);
	void __fastcall Timer2Timer(TObject *Sender);
	void __fastcall Button5Click(TObject *Sender);
	void __fastcall Button12Click(TObject *Sender);
	void __fastcall Button19Click(TObject *Sender);
	void __fastcall btnPrintClick(TObject *Sender);
	void __fastcall Timer3Timer(TObject *Sender);
	void __fastcall mskedtBeginMacChange(TObject *Sender);
	void __fastcall edtBurnCountChange(TObject *Sender);
	void __fastcall mskedtBeginSnChange(TObject *Sender);
	void __fastcall mskedtMacPreChange(TObject *Sender);
	void __fastcall ckbReworkClick(TObject *Sender);
	void __fastcall ckbAutoIncreaseClick(TObject *Sender);
	void __fastcall mskedtBurnMacExit(TObject *Sender);
	void __fastcall mskedBurntMacPreExit(TObject *Sender);
	void __fastcall Button7Click(TObject *Sender);
	void __fastcall Timer1Timer(TObject *Sender);
	void __fastcall Button6Click(TObject *Sender);
	void __fastcall Button1Click(TObject *Sender);
	void __fastcall Button8Click(TObject *Sender);
	void __fastcall Button9Click(TObject *Sender);
	void __fastcall Button10Click(TObject *Sender);
	void __fastcall Button11Click(TObject *Sender);
	void __fastcall btnReworkClick(TObject *Sender);
	void __fastcall ckbMtsModeClick(TObject *Sender);
	void __fastcall ckbBurnClick(TObject *Sender);
	void __fastcall MaskEdit9Change(TObject *Sender);
	void __fastcall btnGetInfoClick(TObject *Sender);
	void __fastcall btnLoadDutVersionClick(TObject *Sender);
	void __fastcall ckbDutMaxTimeGetIdChange(TObject *Sender);
	void __fastcall ckbVideo4k601Click(TObject *Sender);
	void __fastcall Timer4Timer(TObject *Sender);
private:	// User declarations
	int getKindCnt;
	TReadHIDThread  *ReadHIDThread;
	DUT m_dut;
//	String m_hwid[14];
	bool m_bAutoIncrease; //燒錄成功
	bool m_bMts[5];
	USB_Hub_Tree refUsbHubTree;

	bool Xml2Tree(tinyxml2::XMLDocument *doc);
	bool ProcessXmlItem(tinyxml2::XMLElement *pParentNode, TTreeNode *pTreeNode);
	bool CompareUsbHubTree(USB_Hub_Tree &refTree, USB_Hub_Tree &tstTree);
	bool CompareTreeNode(tinyxml2::XMLElement *pRef, tinyxml2::XMLElement *pTst);
//	void __fastcall TUSBHIDForm::CountBurnRange();
	bool LoadDutInfomation();
	bool CompareInfoFlash(InfoFlash &di, String backupFirmware, String MinFwVersion, String &msg);
	bool VerifyUsbHubHardwareId();
	void ClearInformation();
	void PlayVoice(int tag);
	bool CheckData(int tag);
	void TestStart(int tag);
	void Delay(int iMilliSeconds);
	void __fastcall WndProc(TMessage &Message);
	void __fastcall ProcessInput(void);
	void Oscilloscopes(short *idata);
	// WaveOut
	HWAVEOUT	    WaveOut; // 音頻輸出句柄
	WAVEHDR		    WaveOutHeader;
	char*		    WaveOutData;
	int             buffers;
	int             buff;
	WAVEFORMATEX    waveFormat;
	WAVEHDR         *WaveBuffers;
	int             WaveBufSize;
	HWAVEIN         hWaveIn;
	bool            bStart;
	short           *my_data;
protected:
	void AutoIncrease();  // 自動跳號
	bool GetUsbHubTree(USB_Hub_Tree &hubTree);
	bool DisplayHub(tinyxml2::XMLElement *pHub, int tier);
	bool GetDutInfomation(USB_Hub_Tree &hubTree);
public:		// User declarations
	__fastcall TUSBHIDForm(TComponent* Owner);

	int  __fastcall HexToInt(AnsiString HexStr);
	char __fastcall DUTT(void);
	char __fastcall DUTB(void);
	char __fastcall DUTV(void);
	bool __fastcall TUSBHIDForm::VerifyInfoFlash();

	bool WaveMakeHeader(DWORD ulSize, HGLOBAL &HData, HGLOBAL &HWaveHdr,LPSTR &lpData, LPWAVEHDR &lpWaveHdr);
	void WaveFreeHeader(HGLOBAL &HData, HGLOBAL &HWaveHdr);
	bool WaveRecordOpen(LPHWAVEIN lphwi, HWND Hwnd, int nChannels,long lFrequency, int nBits);
	bool WaveRecordPrepare(HWAVEIN hwi, LPWAVEHDR &lpWaveHdr);
	void WaveRecordEnd(HWAVEIN hwi, LPWAVEHDR &lpWaveHdr);
	void WaveRecordClose(HWAVEIN hwi);
	bool WavePlayOpen(LPHWAVEOUT lphwo, HWND Hwnd, int nChannels,long lFrequency, int nBits);
	bool WavePlayPrepare(HWAVEOUT hwo, LPWAVEHDR &lpWaveHdr);
	void WavePlayEnd(HWAVEOUT hwo, LPWAVEHDR &lpWaveHdr);
	void WavePlayClose(HWAVEOUT hwo);
	void TestAudio(int nChannels,long lFrequency, int nBits, int sec);
	bool __fastcall CheckVoc(void);
	void __fastcall CheckAudio(void);

	void __fastcall MMWimData(TMessage &Msg);
	void __fastcall MMWomDone(TMessage &Msg);
	BEGIN_MESSAGE_MAP
	MESSAGE_HANDLER(MM_WIM_DATA, TMessage, MMWimData)
	MESSAGE_HANDLER(MM_WOM_DONE, TMessage, MMWomDone)
	END_MESSAGE_MAP(TForm)

	bool FAllocated_I;
	bool FAllocated_O;
	bool FRecording;
	bool FPlaying;

	int len;
	HWAVEIN hwi;
	HWAVEOUT hwo;
	HGLOBAL hgData_I, hgData_O, hgWaveHdr_I, hgWaveHdr_O;
	LPSTR lpData_I, lpData_O;
	LPWAVEHDR lpWaveHdr_I, lpWaveHdr_O;

	//==============================================================

	AnsiString      SS;                                 //共用字串
	bool            SkypeAPIAvail;
	char            PASS;                               //USB Phone驗證
	char            KIND;                               //USB Phone種類
	char            MODE;                               //USB Phone模式
	char            RING;                               //USB Phone鈴響
	char            RINGIMG;                            //USB Phone鈴響
	char            REC;                                //USB Phone錄音
	char            LCM_SKYPE_PAGE;                     //USB Phone錄音
	int             LCM_SKYPE_LIST_NO;                  //USB Phone錄音
	char            LINEST;                             //上線狀況
	char            LINEST0;                            //上個查循上線狀況
	char            SEARCHS;                            //查詢項目
	char            CALLOUT;                            //查詢項目
	char            CHANGEIMG;                          //圖像更新
	unsigned char   pix[128][8];
	unsigned char   pix_tmp;
	int             i,j,k;
	int             L1,L2,L3;                           //單行數量
	char            NUMMODE;                            //數字輸入狀態
	char            NUMSEND;                            //數字輸入號碼
	int             LX,LY;                              //LCM浮標
	AnsiString      CALLUSERNAME;                       //
	AnsiString      CurrentUserHandle;                  //本機skype使用者
	int             HID_COUNT;                          //HID RW COUNT
	char            Key_SN;
	int             Get_No_Key_Time;                    //並未按鍵次數計數
	unsigned int    OGKey,OGKno;                        //上次按鍵值
	AnsiString      OTime;                              //上次LCM時間顯示
	char            Destination,Source;
	int             LVol,RVol,Mute,CtrlType;
	int             debug;
	HINSTANCE       g_hInstance;
	HANDLE          m_hMCIWnd;
	int             deviceID;
	AnsiString      FullName;
	char            Skype_ST;
	int             Skype_CallID;
//    int             USBP;
	LPVOID          *CMLP;
//    DWORD           CMSPK;
};
//---------------------------------------------------------------------------
extern PACKAGE TUSBHIDForm *USBHIDForm;
//---------------------------------------------------------------------------
#endif
//USB HID 變數群================================================
GUID            HidGuid;
HDEVINFO        hDevInfo;
HANDLE          hDeviceHandleW,hDeviceHandleR;
PSP_DEVICE_INTERFACE_DETAIL_DATA pDeviceInterfaceDetailData;
HIDP_CAPS       hidPCaps;
//---------------------------------------------------------------------------
DWORD           Result;                             //共用變數
BYTE            OutputReport[16];
DWORD           NumberOfBytesWritten;
BYTE            InputReport[16];
DWORD           NumberOfBytesRead;
//---------------------------------------------------------------------------
//void __fastcall DelayUs(__int64 Us)
//{
//LARGE_INTEGER CurrTicks, TicksCount;
//QueryPerformanceFrequency(&TicksCount);
//QueryPerformanceCounter(&CurrTicks);
//TicksCount.QuadPart = TicksCount.QuadPart * Us / 1000000i64;
//TicksCount.QuadPart += CurrTicks.QuadPart;
//while(CurrTicks.QuadPart<TicksCount.QuadPart)
//	QueryPerformanceCounter(&CurrTicks);
//}
//---------------------------------------------------------------------------
